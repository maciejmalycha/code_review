import subprocess, re
from app import app, repo, User
from app.model import Review


class CodeCollaborator(object):
    def __init__(self):
        pass

    def create_review(self, changeset):
        review = Review.query.filter(Review.id == changeset.review_id).first()
        target_release = review.target[4:9]

        owner = User.query.filter(User.email == changeset.owner_email).first()
        cmd = """{cc} --no-browser --non-interactive admin review create \
--custom-field "Overview=Auto generated by code review tool" \
--custom-field "Project=iWD (Intelligent Workload Distribution)" \
--custom-field "Release={rel}" \
--title "{title}"
        """.format(cc=app.config["CC_BIN"], owner=owner.cc_login, title=changeset.title, rel=target_release)
        app.logger.info("CMD: " + cmd)
        output = subprocess.check_output(cmd, shell=True)
        app.logger.info("CodeCollaborator response: {resp}".format(resp=output))
        regex = re.compile("Review #([0-9]+)")
        # /home/jenkins/ccollab-client/ccollab --no-browser --non-interactive admin review create --creator piotrr --custom-field "Overview=this is the overview" --custom-field "Project=iWD (Intelligent Workload Distribution)" --title "this is title"
        r = regex.search(output)
        reviewId = r.groups()[0]
        cmd = "{cc} --no-browser --non-interactive admin review participant assign {reviewId} {owner} author".format(
            cc=app.config["CC_BIN"], owner=owner.cc_login, reviewId=reviewId)
        app.logger.info("Setting author, cmd: " + cmd)
        output = subprocess.check_output(cmd, shell=True)
        app.logger.info("CodeCollaborator response: {resp}".format(resp=output))
        cmd = "{cc} --no-browser --non-interactive admin review participant assign {reviewId} roman.szalla observer".format(
            cc=app.config["CC_BIN"], reviewId=reviewId)
        app.logger.info("Setting script user as participant, cmd: " + cmd)
        output = subprocess.check_output(cmd, shell=True)
        app.logger.info("CodeCollaborator response: {resp}".format(resp=output))
        return reviewId

    def create_empty_cc_review(self):
        output = subprocess.check_output(
            "{cc} --no-browser --non-interactive admin review create".format(cc=app.config["CC_BIN"]), shell=True)
        regex = re.compile("Review #([0-9]+)")
        # /home/jenkins/ccollab-client/ccollab --no-browser --non-interactive admin review create --creator piotrr --custom-field "Overview=this is the overview" --custom-field "Project=iWD (Intelligent Workload Distribution)" --title "this is title"
        r = regex.search(output)
        reviewId = r.groups()[0]
        return reviewId

    def upload_diff(self, reviewId, revision, repoPath):
        parent = repo.hg_parent(revision)
        # TODO: get parent revision, -1 doesn't work
        output = subprocess.check_output(
            "{cc} addhgdiffs {reviewId} -r {parent} -r {rev}".format(cc=app.config["CC_BIN"], reviewId=reviewId,
                                                                     parent=parent, rev=revision), cwd=repoPath,
            shell=True)
        if "Changes successfully attached" in output:
            return (True, output)
        return (False, output)

