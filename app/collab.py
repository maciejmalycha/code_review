import logging
import subprocess, re
from app import app, repo, User
from app.model import Review


logger = logging.getLogger(__name__)


# subprocess.check_output was introduced in 2.7 see
# http://docs.python.org/library/subprocess.html#subprocess.check_output
if "check_output" not in dir(subprocess):  # duck punch it in!
    def f(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise subprocess.CalledProcessError(retcode, cmd)
        return output

    subprocess.check_output = f


class CodeCollaborator(object):
    def __init__(self):
        pass

    def create_review(self, changeset):
        review = Review.query.filter(Review.id == changeset.review_id).first()
        target_release = review.target[4:9]

        owner = User.query.filter(User.email == changeset.owner_email).first()
        cmd = """{cc} --no-browser --non-interactive admin review create \
--custom-field "Overview=Auto generated by code review tool" \
--custom-field "Project=iWD (Intelligent Workload Distribution)" \
--custom-field "Release={rel}" \
--title "{title}"
        """.format(cc=app.config["CC_BIN"], owner=owner.cc_login, title=changeset.title, rel=target_release)
        logger.info("CMD: " + cmd)
        output = subprocess.check_output(cmd, shell=True)
        logger.info("CodeCollaborator response: {resp}".format(resp=output))
        regex = re.compile("Review #([0-9]+)")
        # /home/jenkins/ccollab-client/ccollab --no-browser --non-interactive admin review create --creator piotrr --custom-field "Overview=this is the overview" --custom-field "Project=iWD (Intelligent Workload Distribution)" --title "this is title"
        r = regex.search(output)
        review_id = r.groups()[0]
        cmd = "{cc} --no-browser --non-interactive admin review participant assign {review_id} {owner} author".format(
            cc=app.config["CC_BIN"], owner=owner.cc_login, review_id=review_id)
        logger.info("Setting author, cmd: " + cmd)
        output = subprocess.check_output(cmd, shell=True)
        logger.info("CodeCollaborator response: {resp}".format(resp=output))
        cmd = "{cc} --no-browser --non-interactive admin review participant assign {review_id} roman.szalla observer".format(
            cc=app.config["CC_BIN"], review_id=review_id)
        logger.info("Setting script user as participant, cmd: " + cmd)
        output = subprocess.check_output(cmd, shell=True)
        logger.info("CodeCollaborator response: {resp}".format(resp=output))
        return review_id

    def create_empty_cc_review(self):
        output = subprocess.check_output(
            "{cc} --no-browser --non-interactive admin review create".format(cc=app.config["CC_BIN"]), shell=True)
        regex = re.compile("Review #([0-9]+)")
        # /home/jenkins/ccollab-client/ccollab --no-browser --non-interactive admin review create --creator piotrr --custom-field "Overview=this is the overview" --custom-field "Project=iWD (Intelligent Workload Distribution)" --title "this is title"
        r = regex.search(output)
        review_id = r.groups()[0]
        return review_id

    def upload_diff(self, review_id, revision, repo_path):
        # TODO: Multiple parents
        parent = repo.revision(revision).parents[0]
        # TODO: get parent revision, -1 doesn't work
        output = subprocess.check_output(
            "{cc} addhgdiffs {review_id} -r {parent} -r {rev}".format(cc=app.config["CC_BIN"], review_id=review_id,
                                                                      parent=parent, rev=revision), cwd=repo_path,
                                                                      shell=True)
        if "Changes successfully attached" in output:
            return True, output
        return False, output


